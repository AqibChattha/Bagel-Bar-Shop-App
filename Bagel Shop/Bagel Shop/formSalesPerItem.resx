<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>